Design Patterns Summary
1.)Abstract Factory: Abstract factory pqatterns work around a super-factory which creates other factories. This factory is also
called as factory of factories. In abstract factory pattern an interface is responsinle for creating a factory of related objects
without explicitly specifying their classes.
2.)Builder: Builder pattern builds a complex object using simple objects and using a step by step approach. A builder class builds
the final object step by step. This builder is independent of other objects.
3.)Factory Pattern: Factory pattern is one of the most used design patterns in Java. In Factory pattern, we create object without
exposing the creation logic to the client and refer to newly created object using a common interface.
4.)Prototype:Prototype patterns refers to creating duplicate object while keeping performance in mind. This pattern involves implementing
a prototype interface which tells to create a clone of the current object.
5.)Singleton: This pattern involces a single class which is responsible to create an object while making sure that only single object
gets created. This class provides to access its only object which can be accessed directly without need to instantiate the object of the
class.
6.)Adapter:This pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces. A real
life example could be a case of card reader which acts as an adapter between memory card and a laptop
7.)Bridge:Bridge is used when we need to decouple an abstraction from its implementation so that two can vary independently
8.)Composite pattern: Composite patterns composes objects in term of a tree structure to represent part as well as whole hierarchy. This pattern creates a class that contains group of its own objects. This class provides ways to modify its group of same objects.
9.)Decorator pattern: this pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact
10.)Facade pattern: Hides the complexities of the system and provides an interface to the client using which the client can access the system. This pattern involves a single class which provides simplified methods required by client and delegates calls to methods of existing classes
12.) Flyweight pattern: Flyweight pattern is primarily used to reduce the number of objects created and to decrease memory footprint and increase performance. Flyweight pattern tries to reuse already existing similar kind objects by storing them and creates new object when no matching object found
11.)Proxy pattern: In proxy pattern, a class represents functionality of another class. This type of design pattern comes under structural pattern. In proxy pattern, we create object having original object to interface its functionality to outer world. Proxy class is used to reduce memory footprint of real object loading.
12.)Chain of Responsibility Pattern: As the name suggests, the chain of responsibility pattern creates a chain of receiver objects for a request. This pattern decouples sender and receiver of a request based on type of request. This pattern comes under behavioral patterns. In this pattern, normally each receiver contains reference to another receiver. If one object cannont handle the request then it passes the same to the next receiver and so on.
13.)Command pattern is a data driven design pattern and falls under behavioral pattern category. A request is wrapped under an object as commmand and passed to invoker object. Invoker object looks for the appropriate object which can handle this command and passes the command to the corresponding object which executes the command
14.)Interpreter pattern provides a way to evaluate language grammar or expression. This type of pattern comes under bahavioral pattern. This pattern involves implementing an expression interface which tells to interpret a particular context. This pattern is used in SQL parsing, symbol processing etx.
15.)Iterator pattern is very commonly used design pattern in programming environment. This pattern is used to get a way to access the elements of a collection object in sequential manner without any need to know its underlying representation.
16.)Mediator Pattern: Mediator pattern is used to reduce communication complexity between objects or classes. This pattern procides a mediator class which normally handles all the communications between differenct classes and supports easy maintenance of the code by loose coupling. Mediator pattern falls under behavioral pattern category
