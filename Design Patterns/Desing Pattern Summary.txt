Design Patterns Summary
1.)Abstract Factory: Abstract factory pqatterns work around a super-factory which creates other factories. This factory is also
called as factory of factories. In abstract factory pattern an interface is responsinle for creating a factory of related objects
without explicitly specifying their classes.
2.)Builder: Builder pattern builds a complex object using simple objects and using a step by step approach. A builder class builds
the final object step by step. This builder is independent of other objects.
3.)Factory Pattern: Factory pattern is one of the most used design patterns in Java. In Factory pattern, we create object without
exposing the creation logic to the client and refer to newly created object using a common interface.
4.)Prototype:Prototype patterns refers to creating duplicate object while keeping performance in mind. This pattern involves implementing
a prototype interface which tells to create a clone of the current object.
5.)Singleton: This pattern involces a single class which is responsible to create an object while making sure that only single object
gets created. This class provides to access its only object which can be accessed directly without need to instantiate the object of the
class.
6.)Adapter:This pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces. A real
life example could be a case of card reader which acts as an adapter between memory card and a laptop
7.)Bridge:Bridge is used when we need to decouple an abstraction from its implementation so that two can vary independently
8.)Composite patterns composes objects in term of a tree structure to represent part as well as whole hierarchy. This pattern creates a class that contains group of its own objects. This class provides ways to modify its group of same objects.
9.)Decorator pattern, this pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact
10.)Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system. This pattern involves a single class which provides simplified methods required by client and delegates calls to methods of existing classes
